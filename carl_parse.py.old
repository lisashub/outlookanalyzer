#### https://stackoverflow.com/questions/22813814/clearly-documented-reading-of-emails-functionality-with-python-win32com-outlook


# https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.outlook.mailitem?redirectedfrom=MSDN&view=outlook-pia#properties_
# Use Item[Object] (index), where index is the index number of a mail message or a value used to match the default property of a message, to return a single MailItem object from a specified folder.
# find method
# https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.outlook._items.find?view=outlook-pia

import win32com.client #core extraction library
from tqdm import tqdm # library to display extraction progress bar
import pandas as pd # library to tabulate data and generate plot/image
from PIL import Image #library to display image (temporary if we build web frontend)
from tabulate import tabulate
import matplotlib.pyplot as plt
import dataframe_image as dfi
from wordcloud import WordCloud, STOPWORDS #word cloud generation library
import re #regex library used to clean data
import os 
import json
import datetime
from datetime import timedelta
from datetime import date
from dateutil.relativedelta import relativedelta

TEMP_DIR = "C:\WINDOWS\Temp"
FILE_NAME = "email_out"
FILE_PATH = TEMP_DIR + "\\" + FILE_NAME

def read_email():

    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI") #maps outlook variable to outlook application
    inbox = outlook.GetDefaultFolder(6) #outlook.GetDefaultFolder(6) is the default for the application inbox
    messages = inbox.Items #variable for items in inbox

    # Example using timedelta by days
    # received_dt = date.today() - timedelta(days=30)
    # e_dt = date.today() - timedelta(days=30)
    # s_dt = date.today() - timedelta(days=60)

    # Example using relativedelta by month
    e_dt = date.today() - relativedelta(months=+1)
    s_dt = date.today() - relativedelta(months=+2)

    print("Staring date: " + str(s_dt))
    print("Ending date: " + str(e_dt))

    # print (received_dt)
    start_dt = s_dt.strftime('%m/%d/%Y %H:%M %p')
    end_dt = e_dt.strftime('%m/%d/%Y %H:%M %p')
    # received_dt = received_dt.strftime('%m/%d/%Y %H:%M %p')
    # current_message = messages.Restrict("[ReceivedTime] >= '" + str(received_dt) + "'")

    filtered_message = messages.Restrict("[ReceivedTime] >= '" + start_dt + "' AND [ReceivedTime] <= '" + end_dt + "'")

    # today = datetime.date.today()
    # first = today.replace(day=1)
    # lastMonth = first - datetime.timedelta(days=1)
    # print(lastMonth.strftime("%Y%m"))

    # current_message = messages.Restrict("[SenderEmailAddress] = 'notifications@github.com' ")

 #   current_message = messages.Find(filteredItems)

#    current_message = messages.GetLast()
    # print(current_message)

    # for x in current_message:
    #     sender_name = x.SenderName
    #     print(sender_name)
    
    # email_temp = []
    # email_body = []
    all_messages_list = []

    # # with open("C:\WINDOWS\Temp/sample.json", "w+") as outfile:
    # #     outfile.write(json_object)

    # # OutlookInternalVersion
    # # OutlookVersion

    messages.Sort("[ReceivedTime]",True)
    for item in tqdm(filtered_message):
        messages_dict = {}

        # Some attributes are only applicable to email, not other items such as meeting invites
        if item.Class == 43: # normal email are class 43 (meetint invites are 53, responses are 56 )

            try:
                alternate_recipient_allowed = item.AlternateRecipientAllowed
                messages_dict['AlternateRecipientAllowed'] = alternate_recipient_allowed
            except Exception as e:
                print("error extracting:" + str(e))

            try:
                is_marked_as_task = item.IsMarkedAsTask
                messages_dict['IsMarkedAsTask'] = is_marked_as_task
            except Exception as e:
                print("error extracting:" + str(e))

            try:
                read_receipt_requested = item.ReadReceiptRequested
                messages_dict['ReadReceiptRequested'] = read_receipt_requested
            except Exception as e:
                print("error extracting:" + str(e))

            try:
                to = item.To
                messages_dict['To'] = to
            except Exception as e:
                print("error extracting:" + str(e))

            try:
                cc = item.CC
                messages_dict['CC'] = cc
            except Exception as e:
                print("error extracting:" + str(e))

            try:
                bcc = item.BCC
                messages_dict['BCC'] = bcc
            except Exception as e:
                print("error extracting:" + str(e))

        # Continue with other attributes applicable to email and other items such as meeting invites

        try:
            attachments_list = []
            # Loops over each attachment and adds a list of attachment file names
            for attachment in item.Attachments:
                attachments_list.append(attachment.FileName)
            messages_dict['Attachments'] = attachments_list
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            auto_forwarded = item.AutoForwarded
            messages_dict['AutoForwarded'] = auto_forwarded
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            email_class = item.Class
            messages_dict['Class'] = email_class
        except Exception as e:
            print("error extracting:" + str(e))

       
        try:
             # Split the CSV string from Categories into a list 
            messages_dict['Categories'] = item.Categories.split(",")
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            companies = item.Companies
            messages_dict['Companies'] = companies
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            importance = item.Importance
            messages_dict['Importance'] = importance
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            sender_name = item.SenderName
            messages_dict['SenderName'] = sender_name
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            sender_email_address = item.SenderEmailAddress
            messages_dict['SenderEmailAddress'] = sender_email_address
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            sent_on = item.SentOn
            messages_dict['SentOn'] = sent_on
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            sender_email_type = item.SenderEmailType
            messages_dict['SenderEmailType'] = sender_email_type
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            reminder_set = item.ReminderSet
            messages_dict['ReminderSet'] = reminder_set
        except Exception as e:
            print("error extracting:" + str(e))

        
        try:
            recipients_list = []
            # Loops over each recipient and adds a list of recipient  names
            for recipient in item.Recipients:
                recipients_list.append(recipient.Name)
            messages_dict['Recipients'] = recipients_list
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            sensitivity = item.Sensitivity
            messages_dict['Sensitivity'] = sensitivity
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            flag_request = item.FlagRequest
            messages_dict['FlagRequest'] = flag_request
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            unread = item.UnRead
            messages_dict['UnRead'] = unread
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            size = item.Size
            messages_dict['Size'] = size
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            subject = item.Subject
            messages_dict['Subject'] = subject
        except Exception as e:
            print("error extracting:" + str(e))
        
        try:
            body = item.Body
            messages_dict['Body'] = body
        except Exception as e:
            print("error extracting:" + str(e))

        try:
            received_time = item.ReceivedTime
            # received_time = item.ReceivedTime.strftime("%m/%d/%Y %H:%M:%S")
            messages_dict['received_time'] = received_time
        except Exception as e:
            print("error extracting:" + str(e))

        all_messages_list.append(messages_dict)

        # print(all_messages_list)

    json_object = json.dumps(all_messages_list, indent = 4, sort_keys=True, default=str)

    with open(FILE_PATH, "w+") as outfile:
        outfile.write(json_object)

def main():

    #Placeholder for where user can input whether extraction is necessary
    read_email()


if __name__ == "__main__":
    main()